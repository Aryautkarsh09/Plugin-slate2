{"ast":null,"code":"var _jsxFileName = \"/Users/utkarsharya/Desktop/Editor/my-app/src/Edtor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport { createEditor, Transforms, Editor, Range } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyEditor() {\n  _s();\n  const [initialValue, setInitialvalue] = useState([{\n    type: \"paragraph\",\n    children: [{\n      text: \"A line of text in a paragraph.\"\n    }]\n  }]);\n  const [codebutton, setcodebutton] = useState(false);\n  const [editor] = useState(() => TablePlugin(withReact(createEditor())));\n  function codeb() {\n    if (codebutton == false) {\n      setcodebutton(true);\n      Transforms.insertNodes(editor, {\n        type: \"codei\",\n        children: [{\n          text: \"\"\n        }]\n      });\n    } else {\n      setcodebutton(false);\n      Transforms.insertNodes(editor, {\n        type: \"paragraph\",\n        children: [{\n          text: \"\"\n        }]\n      });\n    }\n  }\n  const renderElement = useCallback(_ref => {\n    let {\n      attributes,\n      children,\n      element\n    } = _ref;\n    switch (element.type) {\n      case \"codei\":\n        return /*#__PURE__*/_jsxDEV(\"pre\", {\n          ...attributes,\n          style: {\n            fontFamily: \"Sans-serif\",\n            color: \"red\",\n            backgroundColor: \"black\",\n            margin: \"0px\"\n          },\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this);\n      case 'table':\n        return /*#__PURE__*/_jsxDEV(\"table\", {\n          ...attributes,\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this);\n      case 'table-rows':\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...attributes,\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this);\n      case 'table-cell':\n        return /*#__PURE__*/_jsxDEV(\"td\", {\n          ...attributes,\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          ...attributes,\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 16\n        }, this);\n    }\n  }, []);\n  // const [col, setCol] = useState([{ text: \"\" }]);\n\n  const ele = [{\n    type: \"table\",\n    children: [{\n      type: \"table-row\",\n      children: [{\n        type: 'table-cell',\n        children: [{\n          text: \"\"\n        }]\n      }]\n    }\n    // { type: \"table-row\", children: [{type : 'table-cell',\n    // children : col}] },\n    // { type: \"table-row\", children: [{type : 'table-cell',\n    // children : col}]}\n    ]\n  }];\n\n  function TablePlugin(editor) {\n    return {\n      ...editor\n      // createTable: () => {\n      //   Transforms.insertNodes(editor, ele);\n      // },\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(Slate, {\n    editor: editor,\n    initialValue: initialValue,\n    onChange: v => setInitialvalue(v),\n    children: [/*#__PURE__*/_jsxDEV(Editable, {\n      renderElement: renderElement,\n      onKeyDown: event => {\n        if (event.code == \"ArrowDown\") {\n          const range = editor.selection;\n          const b = Editor.end(editor, []);\n          let a1 = range.anchor.path.toString();\n          let a2 = b.path.toString();\n          if (a1 === a2) {\n            Editor.insertNode(editor, {\n              type: \"paragraph\",\n              children: [{\n                text: \"\"\n              }]\n            });\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: codeb,\n      children: \"Code-block\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {},\n      children: \"Add-Table\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(MyEditor, \"O8RKSKTywTNuv7wFNmL5PbsF6+s=\");\n_c = MyEditor;\nvar _c;\n$RefreshReg$(_c, \"MyEditor\");","map":{"version":3,"names":["React","useState","useCallback","createEditor","Transforms","Editor","Range","Slate","Editable","withReact","jsxDEV","_jsxDEV","MyEditor","_s","initialValue","setInitialvalue","type","children","text","codebutton","setcodebutton","editor","TablePlugin","codeb","insertNodes","renderElement","_ref","attributes","element","style","fontFamily","color","backgroundColor","margin","fileName","_jsxFileName","lineNumber","columnNumber","ele","onChange","v","onKeyDown","event","code","range","selection","b","end","a1","anchor","path","toString","a2","insertNode","onClick","_c","$RefreshReg$"],"sources":["/Users/utkarsharya/Desktop/Editor/my-app/src/Edtor.js"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\n\nimport { createEditor, Transforms, Editor, Range } from \"slate\";\n\nimport { Slate, Editable, withReact } from \"slate-react\";\n\nexport default function MyEditor() {\n  const [initialValue, setInitialvalue] = useState([\n    {\n      type: \"paragraph\",\n      children: [{ text: \"A line of text in a paragraph.\" }],\n    },\n  ]);\n  const [codebutton, setcodebutton] = useState(false);\n  const [editor] = useState(() => TablePlugin(withReact(createEditor())));\n\n  function codeb() {\n    if (codebutton == false) {\n      setcodebutton(true);\n      Transforms.insertNodes(editor, {\n        type: \"codei\",\n        children: [{ text: \"\" }],\n      });\n    } else {\n      setcodebutton(false);\n      Transforms.insertNodes(editor, {\n        type: \"paragraph\",\n        children: [{ text: \"\" }],\n      });\n    }\n  }\n\n  const renderElement = useCallback(({ attributes, children, element }) => {\n    switch (element.type) {\n      case \"codei\":\n        return (\n          <pre\n            {...attributes}\n            style={{\n              fontFamily: \"Sans-serif\",\n              color: \"red\",\n              backgroundColor: \"black\",\n              margin: \"0px\",\n            }}\n          >\n            {children}\n          </pre>\n        );\n        case  'table':\n            return(\n              <table {...attributes}>{children}</table>\n\n\n            );\n        case 'table-rows':\n            return(\n              <tr {...attributes}>{children}</tr>\n\n            );\n         case 'table-cell':\n          return(\n            <td {...attributes}>{children}</td>\n          )   \n      default:\n        return <p {...attributes}>{children}</p>;\n    }\n  }, []);\n  // const [col, setCol] = useState([{ text: \"\" }]);\n\n  const ele = [{\n    type: \"table\",\n    children: [\n      {\n        type: \"table-row\",\n        children: [{type : 'table-cell',\n        children : [{ text: \"\" }]}]\n      },\n      // { type: \"table-row\", children: [{type : 'table-cell',\n      // children : col}] },\n      // { type: \"table-row\", children: [{type : 'table-cell',\n      // children : col}]}\n    ]\n  }];\n\n  function TablePlugin(editor) {\n    return {\n      ...editor,\n      // createTable: () => {\n      //   Transforms.insertNodes(editor, ele);\n      // },\n    };\n  }\n\n  return (\n    <Slate\n      editor={editor}\n      initialValue={initialValue}\n      onChange={(v) => setInitialvalue(v)}\n    >\n      <Editable\n        renderElement={renderElement}\n        onKeyDown={(event) => {\n          if (event.code == \"ArrowDown\") {\n            const range = editor.selection;\n\n            const b = Editor.end(editor, []);\n            let a1 = range.anchor.path.toString();\n            let a2 = b.path.toString();\n\n            if (a1 === a2) {\n              Editor.insertNode(editor, {\n                type: \"paragraph\",\n                children: [{ text: \"\" }],\n              });\n            }\n          }\n        }}\n      />\n      \n      <button onClick={codeb}>Code-block</button>\n      <button onClick={()=>{}}>Add-Table</button>\n    </Slate>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}